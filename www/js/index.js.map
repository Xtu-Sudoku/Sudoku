{"version":3,"sources":["webpack:///webpack/bootstrap 7da6322929cc85902872","webpack:///./js/index.js","webpack:///./js/ui/grid.js","webpack:///./js/core/toolkit.js","webpack:///./js/core/generator.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC,MAAM;AACvC,2CAA0C,WAAW;AACrD,cAAa;AACb;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;;;;;;;AC1DA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA,4BAA2B,SAAS,wBAAwB;;AAE5D,MAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA,qB;AACA;AACA;AACA,qBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA,gBAAe,SAAS;AACxB;AACA;AACA,uBAAsB,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA,+BAA8B,cAAc;AAC5C;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,0CAAyC;AACzC;AACA;AACA;AACA;AACA,MAAK;;AAEL,6CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,G;;;;;;ACtFA;;AAEA;;AAEA,kCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD;;AAErD,0BAAyB,KAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAkB;AAClB;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,IAAI,M;AAC3B,oCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kC","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7da6322929cc85902872","const Grid=require(\"./ui/grid\");\n\n//九宫格的显示\nconst grid = new Grid($(\"#container\"));\ngrid.build();\ngrid.layout();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/index.js\n// module id = 0\n// module chunks = 0","const Toolkit = require(\"../core/toolkit\");\nconst Generator = require(\"../core/generator\");\n//九宫格生成在container中\n//生成九宫格\nclass Grid{\n    constructor(container){\n        this._$container = container;\n    }\n    build(){\n   \t\tconst generator = new Generator();\n   \t\tgenerator.generate();\n   \t\t\n    \tconst matrix = generator.matrix;\n//  \tconst matrix = Toolkit.matrix.makeMatrix();\n    \t\n        const rowGroupClasses = [\"row_g_top\",\"row_g_middle\",\"row_g_bottom\"];\n        const colGroupClasses = [\"col_g_left\",\"col_g_center\",\"col_g_right\"];\n        \n        //每一行创建一个div将每一行的值new成一个span\n        const $cells = matrix.map(rowValues => rowValues\n            .map((cellValue,colIndex)=> {\n                return $(\"<span>\")\n                .addClass(colGroupClasses[colIndex % 3])\n                .text(cellValue);\n            }));\n        //从cells中得到div数组\n        const $divArray = $cells.map(($spanArray,rowIndex) => {\n            return $(\"<div>\")\n            .addClass(\"row\")\n            .addClass(rowGroupClasses[rowIndex % 3])\n            .append($spanArray);\n        });\n        //添加到container中\n        this._$container.append($divArray);\n    }\n    layout(){\n        const width = $(\"span:first\",this._$container).width();\n        $(\"span\",this._$container)\n            .height(width)\n            .css({\n                \"line-height\":`${width}px`,\n                \"font-size\":width<32 ? `${width / 2 }`:\"\"\n            });\n    }\n\n    \n}\n\n\t\tconst generator = new Generator();\n   \t\tgenerator.generate();\n// \t\tconsole.log(generator.matrix);\n   \t\t\n    \tconst matrix = generator.matrix;\n\t\tconsole.log(\"matrix\\n\",matrix);\n\t\t\n\t\t\n//new Grid($(\"#container\")).build();\n\nmodule.exports = Grid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/ui/grid.js\n// module id = 1\n// module chunks = 0","//矩阵和数组 工具\n\nconst matrixToolkit = {\n    makeRow(v=0){\n        const array = new Array(9);\n        array.fill(v);\n        return array;\n    },\n    \n    makeMatrix(v=0) {\n        return Array.from({length:9},() => this.makeRow(v));//在此 是不能和前面一样的\n        \n    },\n    \n    //测试\n    // const a=makeMatrix();\n    // a[0][1]=2;\n    // console.log(a);\n    \n    // Fisher-Yates 洗牌算法\n    shuffle(array) { \n        const length = array.length;\n        const endIndex = length -1;\n        for(let i=0;i<endIndex;i++){\n            const j = i + Math.floor(Math.random() * (length - i));\n            [array[i],array[j]] = [array[j],array[i]];\n        }\n        return array;\n    }, \n    \n    //检查指定位置是否能够填写数字n\n    checkFillable(matrix,n,rowIndex,colIndex){\n        const row = matrix[rowIndex];\n        const column = this.makeRow().map((v,i) =>matrix[i][colIndex]);\n        const {boxIndex} = boxToolkit.convertToBoxIndex(rowIndex,colIndex);\n        //宫\n        const box =boxToolkit.getBoxCells(matrix,boxIndex);\n        for(let i = 0;i < 9; i++){\n            if(row[i] === n || column[i] === n || box[i] === n)\n                return false;\n        }\n        return true;\n    }\n};\n\n//坐标系工具——坐标转换\nconst boxToolkit = {\n    getBoxCells(matrix,boxIndex){//格子的位置\n        const startRowIndex = Math.floor(boxIndex / 3) * 3;\n        const startColIndex = boxIndex % 3 * 3;\n        const result = [];\n        for(let cellIndex = 0;cellIndex < 9; cellIndex++){\n            const rowIndex = startRowIndex + Math.floor(cellIndex / 3);\n            const colIndex = startColIndex + cellIndex % 3;\n            result.push(matrix[rowIndex][colIndex]);\n        }\n        return result;\n    },\n    convertToBoxIndex(rowIndex,colIndex){//宫格的位置\n        return{\n            boxIndex: Math.floor(rowIndex / 3) * 3 + Math.floor(colIndex / 3),\n            cellIndex: rowIndex % 3 * 3 + colIndex % 3\n        };\n    },\n\n    convertFromBoxIndex(boxIndex,cellIndex){//宫格内格子的位置\n        return{\n            rowIndex: Math.floor(boxIndex / 3) * 3 + Math.floor(cellIndex / 3),\n            colIndex:boxIndex % 3 * 3 + cellIndex % 3\n        };\n    }\n};\n\n\n//工具集，用来输出\nmodule.exports = class Toolkit{\n    // 矩阵和数组相关的工具\n    static get matrix(){\n        return matrixToolkit;\n    }\n    \n    //坐标系工具\n    static get box(){\n        return boxToolkit;\n    }\n    \n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/toolkit.js\n// module id = 2\n// module chunks = 0","//生成数独解决方案\r\n\r\nconst Toolkit = require(\"./toolkit\");\r\n\r\nmodule.exports = class Generator{//要导出\r\n//class Generator{\r\n    generate(){\r\n        while(!this.internalGenerate()){\r\n            console.warn(\"try again\");\r\n        }\r\n    }\r\n    internalGenerate(){\r\n        // 入口方法\r\n        this.matrix = Toolkit.matrix.makeMatrix();\r\n        this.orders = Toolkit.matrix.makeMatrix()\r\n            .map(row => row.map((v,i)=> i))//每一行，0-8，随机序列\r\n            .map(row => Toolkit.matrix.shuffle(row));//洗牌方法，打乱，随机选择\r\n            \r\n            for (let n=1;n<=9;n++){\r\n            \tif(!this.fillNumber(n)){\r\n               \t\treturn false;\r\n            \t}\r\n        \t}\r\n        return true;\r\n    }\r\n\r\n    fillNumber(n){//填充行\r\n        return this.fillRow(n,0);\r\n    }\r\n    //递归\r\n    fillRow(n,rowIndex){\r\n        if(rowIndex > 8){//结束\r\n            return true;\r\n        }\r\n        //行数据\r\n        const row = this.matrix[rowIndex];\r\n        //选择填写位置\r\n        const orders = this.orders[rowIndex];\r\n        for(let i = 0 ;i<9; i++){ \r\n\t        const colIndex =orders[i];//固定\r\n            //判断数据 如果此位置已有值，跳过\r\n            if(row[colIndex]){\r\n                continue;\r\n            }\r\n            //检查此位置是否能填\r\n            if(!Toolkit.matrix.checkFillable(this.matrix,n,rowIndex,colIndex)){\r\n                continue;\r\n            }\r\n            row[colIndex] = n;\r\n            //去下一行填写n 如果填写失败则继续寻找当前行下一个位置\r\n            if(!this.fillRow(n,rowIndex + 1)){\r\n                row[colIndex] = 0;\r\n                continue;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n// const generator = new Generator();\r\n// generator.generate();\r\n// console.log(generator.matrix);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/generator.js\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}